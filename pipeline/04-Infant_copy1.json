{
	"name": "04-Infant_copy1",
	"properties": {
		"description": "procfwk infant pipeline used to check when the processing pipeline called by the Child completes and passes the resulting status back to the metadata database.",
		"activities": [
			{
				"name": "Execute Worker Pipeline",
				"description": "The lowest level executor with the metadata framework to call existing processing pipelines within Data Factory. The function called will block processing and wait for an outcome.",
				"type": "AzureFunctionActivity",
				"dependsOn": [
					{
						"activity": "Log Pipeline Running",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Get Pipeline Params",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"functionName": "ExecutePipeline",
					"method": "POST",
					"body": {
						"value": "@concat('\n{\n    \"tenantId\": \"',variables('WorkerCoreDetails')[0].tenantId,'\",\n    \"applicationId\": \"',variables('WorkerCoreDetails')[0].applicationId,'\",\n    \"authenticationKey\": \"',variables('WorkerCoreDetails')[0].authenticationKey,'\",\n    \"subscriptionId\": \"',variables('WorkerCoreDetails')[0].subscriptionId,'\",\n    \"resourceGroupName\": \"',variables('WorkerCoreDetails')[0].resourceGroupName,'\",\n\t\"orchestratorName\": \"',variables('WorkerCoreDetails')[0].orchestratorName,'\",\n    \"orchestratorType\": \"',variables('WorkerCoreDetails')[0].orchestratorType,'\",\n    \"pipelineName\": \"',variables('WorkerCoreDetails')[0].pipelineName,'\"',activity('Get Pipeline Params').output.firstRow.Params,'\n}')",
						"type": "Expression"
					}
				},
				"linkedServiceName": {
					"referenceName": "FrameworkFunctions",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Get Pipeline Params",
				"description": "Returns any parameters from metadata required for the processing pipeline being called. The output can be an empty string if no parameters are required.",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[procfwk].[GetPipelineParameters]",
						"storedProcedureParameters": {
							"PipelineId": {
								"type": "Int32",
								"value": {
									"value": "@pipeline().parameters.pipelineId",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "GetSetMetadata",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Log Pipeline Running",
				"description": "Sets the current pipeline with a status of running within the current execution database table.",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Is Target Worker Validate",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[procfwk].[SetLogPipelineRunning]",
					"storedProcedureParameters": {
						"ExecutionId": {
							"value": {
								"value": "@pipeline().parameters.ExecutionId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"PipelineId": {
							"value": {
								"value": "@pipeline().parameters.pipelineId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"StageId": {
							"value": {
								"value": "@pipeline().parameters.StageId",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "SupportDatabase",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Log Execute Function Activity Failure",
				"description": "Handle true failures from calling out to the Azure Function and update the current execution table accordingly so a restart can occur.",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Execute Worker Pipeline",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[procfwk].[SetLogActivityFailed]",
					"storedProcedureParameters": {
						"ExecutionId": {
							"value": {
								"value": "@pipeline().parameters.ExecutionId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"PipelineId": {
							"value": {
								"value": "@pipeline().parameters.pipelineId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"StageId": {
							"value": {
								"value": "@pipeline().parameters.StageId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"CallingActivity": {
							"value": "ExecuteWorkerPipeline",
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "SupportDatabase",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Wait Until Pipeline Completes",
				"description": "Loops until the Worker pipeline called completes.\n\nSimple status:\n- Running = new iteration.\n- Done = break.",
				"type": "Until",
				"dependsOn": [
					{
						"activity": "Get Wait Duration",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Execute Worker Pipeline",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set Run Id",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@variables('WorkerPipelineState')",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Get Worker Pipeline Status",
							"description": "Checks the status of a given processing pipeline and provides the value for the downstream framework activities to act upon.",
							"type": "AzureFunctionActivity",
							"dependsOn": [],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"functionName": "CheckPipelineStatus",
								"method": "POST",
								"body": {
									"value": "@concat('\n{\n    \"tenantId\": \"',variables('WorkerCoreDetails')[0].tenantId,'\",\n    \"applicationId\": \"',variables('WorkerCoreDetails')[0].applicationId,'\",\n    \"authenticationKey\": \"',variables('WorkerCoreDetails')[0].authenticationKey,'\",\n    \"subscriptionId\": \"',variables('WorkerCoreDetails')[0].subscriptionId,'\",\n    \"resourceGroupName\": \"',variables('WorkerCoreDetails')[0].resourceGroupName,'\",\n\t\"orchestratorName\": \"',variables('WorkerCoreDetails')[0].orchestratorName,'\",\n    \"orchestratorType\": \"',variables('WorkerCoreDetails')[0].orchestratorType,'\",\n    \"pipelineName\": \"',variables('WorkerCoreDetails')[0].pipelineName,'\",\n    \"runId\": \"',variables('WorkerRunId'),'\"\n}')",
									"type": "Expression"
								}
							},
							"linkedServiceName": {
								"referenceName": "FrameworkFunctions",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Wait If Running",
							"description": "True = Do nothing.\nFalse = Wait, before the next iteration.",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Set Worker State",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@variables('WorkerPipelineState')",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Wait for Pipeline",
										"description": "The processing pipeline is still running so Wait before checking its status again.",
										"type": "Wait",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"waitTimeInSeconds": {
												"value": "@activity('Get Wait Duration').output.firstRow.PropertyValue",
												"type": "Expression"
											}
										}
									}
								]
							}
						},
						{
							"name": "Set Last Check DateTime",
							"description": "Update the current execution table with a date time from when the Worker pipeline status was last checked as part of the Until iterations.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Get Worker Pipeline Status",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[procfwk].[SetLogPipelineLastStatusCheck]",
								"storedProcedureParameters": {
									"ExecutionId": {
										"value": {
											"value": "@pipeline().parameters.executionId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"PipelineId": {
										"value": {
											"value": "@pipeline().parameters.pipelineId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"StageId": {
										"value": {
											"value": "@pipeline().parameters.stageId",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "SupportDatabase",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Log Check Function Activity Failure",
							"description": "Report to the current execution table that the framework pipeline activity has failed. This failure is outside of the scope of the framework and is probably related to a wider platform problem.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Get Worker Pipeline Status",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[procfwk].[SetLogActivityFailed]",
								"storedProcedureParameters": {
									"CallingActivity": {
										"value": "GetWorkerPipelineStatus",
										"type": "String"
									},
									"ExecutionId": {
										"value": {
											"value": "@pipeline().parameters.executionId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"PipelineId": {
										"value": {
											"value": "@pipeline().parameters.pipelineId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"StageId": {
										"value": {
											"value": "@pipeline().parameters.stageId",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "SupportDatabase",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Set Worker State",
							"description": "Set the bool state of the Worker pipeline to be used by the Until and If expressions. True = Complete, False = Running.",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Get Worker Pipeline Status",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "WorkerPipelineState",
								"value": {
									"value": "@equals('Complete',activity('Get Worker Pipeline Status').output.SimpleStatus)",
									"type": "Expression"
								}
							}
						}
					],
					"timeout": "0.00:10:00"
				}
			},
			{
				"name": "Get Wait Duration",
				"description": "Return wait duration in seconds from database properties table to be used during each Until iteration when the Worker pipeline is still running.",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[procfwk].[GetPropertyValue]",
						"storedProcedureParameters": {
							"PropertyName": {
								"type": "String",
								"value": "PipelineStatusCheckDuration"
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "GetSetMetadata",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Set Run Id",
				"description": "Set local variable from activity output once for value reuse in downstream activities.",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Execute Worker Pipeline",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "WorkerRunId",
					"value": {
						"value": "@activity('Execute Worker Pipeline').output.RunId",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Validate Pipeline",
				"description": "Query the target data factory and establish if the provided worker pipeline name is valid.",
				"type": "AzureFunctionActivity",
				"dependsOn": [
					{
						"activity": "Log Pipeline Validating",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Capture Worker Core Details as an Array",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"functionName": "ValidatePipeline",
					"method": "POST",
					"body": {
						"value": "@concat('\n{\n    \"tenantId\": \"',variables('WorkerCoreDetails')[0].tenantId,'\",\n    \"applicationId\": \"',variables('WorkerCoreDetails')[0].applicationId,'\",\n    \"authenticationKey\": \"',variables('WorkerCoreDetails')[0].authenticationKey,'\",\n    \"subscriptionId\": \"',variables('WorkerCoreDetails')[0].subscriptionId,'\",\n    \"resourceGroupName\": \"',variables('WorkerCoreDetails')[0].resourceGroupName,'\",\n\t\"orchestratorName\": \"',variables('WorkerCoreDetails')[0].orchestratorName,'\",\n    \"orchestratorType\": \"',variables('WorkerCoreDetails')[0].orchestratorType,'\",\n    \"pipelineName\": \"',variables('WorkerCoreDetails')[0].pipelineName,'\"\n}')",
						"type": "Expression"
					}
				},
				"linkedServiceName": {
					"referenceName": "FrameworkFunctions",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Is Target Worker Validate",
				"description": "True = the worker pipeline name is valid.\nFalse = the worker pipeline name is invalid. Raise an exception.",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Validate Pipeline",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@bool(activity('Validate Pipeline').output.PipelineExists)",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Throw Exception - Invalid Infant",
							"description": "Throw an exception with details about the invalid worker pipeline name.",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "Throw Exception",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"Message": {
										"value": "@concat('Worker pipeline [',variables('WorkerCoreDetails')[0].pipelineName,'] is not valid in target Orchestrator [',variables('WorkerCoreDetails')[0].orchestratorName,']')",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Update Execution With Invalid Worker",
							"description": "Update the current execution table with an informed status for the worker pipeline that couldn't be executed.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[procfwk].[SetLogActivityFailed]",
								"storedProcedureParameters": {
									"CallingActivity": {
										"value": "InvalidPipelineName",
										"type": "String"
									},
									"ExecutionId": {
										"value": {
											"value": "@pipeline().parameters.ExecutionId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"PipelineId": {
										"value": {
											"value": "@pipeline().parameters.pipelineId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"StageId": {
										"value": {
											"value": "@pipeline().parameters.StageId",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "SupportDatabase",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "Log Validate Function Activity Failure",
				"description": "Handle true failures from calling out to the Azure Function and update the current execution table accordingly so a restart can occur.",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Validate Pipeline",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[procfwk].[SetLogActivityFailed]",
					"storedProcedureParameters": {
						"ExecutionId": {
							"value": {
								"value": "@pipeline().parameters.ExecutionId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"PipelineId": {
							"value": {
								"value": "@pipeline().parameters.pipelineId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"StageId": {
							"value": {
								"value": "@pipeline().parameters.StageId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"CallingActivity": {
							"value": "ValidatePipeline",
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "SupportDatabase",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Log Pipeline Validating",
				"description": "Sets the current pipeline with a status of validating within the current execution database table.",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[procfwk].[SetLogPipelineValidating]",
					"storedProcedureParameters": {
						"ExecutionId": {
							"value": {
								"value": "@pipeline().parameters.ExecutionId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"PipelineId": {
							"value": {
								"value": "@pipeline().parameters.pipelineId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"StageId": {
							"value": {
								"value": "@pipeline().parameters.StageId",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "SupportDatabase",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Get Worker Core Details",
				"description": "Return worker pipeline information for metadata database. Including target data factory, pipeline name and resource group. Return the SPN ID and Secret for the worker pipeline being executed. Called at this level as each pipeline can have a different SPN.",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": true,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[procfwk].[GetWorkerDetailsWrapper]",
						"storedProcedureParameters": {
							"ExecutionId": {
								"type": "Guid",
								"value": {
									"value": "@pipeline().parameters.executionId",
									"type": "Expression"
								}
							},
							"PipelineId": {
								"type": "Int32",
								"value": {
									"value": "@pipeline().parameters.pipelineId",
									"type": "Expression"
								}
							},
							"StageId": {
								"type": "Int32",
								"value": {
									"value": "@pipeline().parameters.stageId",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "GetSetMetadata",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Capture Worker Core Details as an Array",
				"description": "Add all worker pipeline details to a local variable array that can be accessed by each function call requiring the values.",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get Worker Core Details",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "WorkerCoreDetails",
					"value": {
						"value": "@array(activity('Get Worker Core Details').output.firstRow)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Get Worker Pipeline Error Details_copy1",
				"description": "Get the activity error details for the run ID of the worker pipeline called. Returns an array of all errors.",
				"type": "AzureFunctionActivity",
				"dependsOn": [
					{
						"activity": "Wait Until Pipeline Completes",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"functionName": "GetActivityErrors",
					"method": "POST",
					"body": {
						"value": "@concat('\n{\n    \"tenantId\": \"',variables('WorkerCoreDetails')[0].tenantId,'\",\n    \"applicationId\": \"',variables('WorkerCoreDetails')[0].applicationId,'\",\n    \"authenticationKey\": \"',variables('WorkerCoreDetails')[0].authenticationKey,'\",\n    \"subscriptionId\": \"',variables('WorkerCoreDetails')[0].subscriptionId,'\",\n    \"resourceGroupName\": \"',variables('WorkerCoreDetails')[0].resourceGroupName,'\",\n\t\"orchestratorName\": \"',variables('WorkerCoreDetails')[0].orchestratorName,'\",\n    \"orchestratorType\": \"',variables('WorkerCoreDetails')[0].orchestratorType,'\",\n    \"pipelineName\": \"',variables('WorkerCoreDetails')[0].pipelineName,'\",\n    \"runId\": \"',variables('WorkerRunId'),'\"\n}')",
						"type": "Expression"
					}
				},
				"linkedServiceName": {
					"referenceName": "FrameworkFunctions",
					"type": "LinkedServiceReference"
				}
			}
		],
		"parameters": {
			"executionId": {
				"type": "string",
				"defaultValue": "60925d1b-53c4-4a43-b4d9-2e84344518a9"
			},
			"stageId": {
				"type": "int",
				"defaultValue": 1
			},
			"pipelineId": {
				"type": "int",
				"defaultValue": 3
			}
		},
		"variables": {
			"WorkerPipelineState": {
				"type": "Boolean"
			},
			"WorkerRunId": {
				"type": "String"
			},
			"WorkerCoreDetails": {
				"type": "Array"
			}
		},
		"folder": {
			"name": "_ProcFwk"
		},
		"annotations": [
			"procfwk",
			"Infant"
		],
		"lastPublishTime": "2021-03-09T09:59:02Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}