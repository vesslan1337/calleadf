{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "CalleDataFactory"
		},
		"Keys_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://CalleRFKeyVault.vault.azure.net/"
		},
		"FrameworkFunctions_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://callerffunctionapp.azurewebsites.net"
		},
		"SupportDatabase_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "calledbConnectionString"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Wait 1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Used just so the procfwk has something to call during development.",
				"activities": [
					{
						"name": "Wait1",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"WaitTime": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"folder": {
					"name": "_Workers"
				},
				"annotations": [
					"_ProcFwkWorker"
				],
				"lastPublishTime": "2021-03-09T09:58:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Wait 10')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Used just so the procfwk has something to call during development.",
				"activities": [
					{
						"name": "Wait10",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"WaitTime": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"folder": {
					"name": "_Workers"
				},
				"annotations": [
					"_ProcFwkWorker"
				],
				"lastPublishTime": "2021-03-09T09:58:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Wait 2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Used just so the procfwk has something to call during development.",
				"activities": [
					{
						"name": "Wait2",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"WaitTime": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"folder": {
					"name": "_Workers"
				},
				"annotations": [
					"_ProcFwkWorker"
				],
				"lastPublishTime": "2021-03-09T09:58:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Wait 3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Used just so the procfwk has something to call during development.",
				"activities": [
					{
						"name": "Wait3",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"WaitTime": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"folder": {
					"name": "_Workers"
				},
				"annotations": [
					"_ProcFwkWorker"
				],
				"lastPublishTime": "2021-03-09T09:59:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Wait 4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Used just so the procfwk has something to call during development.",
				"activities": [
					{
						"name": "Wait4",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"WaitTime": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"folder": {
					"name": "_Workers"
				},
				"annotations": [
					"_ProcFwkWorker"
				],
				"lastPublishTime": "2021-03-09T09:58:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Wait 5')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Used just so the procfwk has something to call during development.",
				"activities": [
					{
						"name": "Wait5",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"WaitTime": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"folder": {
					"name": "_Workers"
				},
				"annotations": [
					"_ProcFwkWorker"
				],
				"lastPublishTime": "2021-03-09T09:59:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Wait 6')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Used just so the procfwk has something to call during development.",
				"activities": [
					{
						"name": "Wait6",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"WaitTime": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"folder": {
					"name": "_Workers"
				},
				"annotations": [
					"_ProcFwkWorker"
				],
				"lastPublishTime": "2021-03-09T09:58:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Wait 7')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Used just so the procfwk has something to call during development.",
				"activities": [
					{
						"name": "Wait7",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"WaitTime": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"folder": {
					"name": "_Workers"
				},
				"annotations": [
					"_ProcFwkWorker"
				],
				"lastPublishTime": "2021-03-09T09:58:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Wait 8')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Used just so the procfwk has something to call during development.",
				"activities": [
					{
						"name": "Wait8",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"WaitTime": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"folder": {
					"name": "_Workers"
				},
				"annotations": [
					"_ProcFwkWorker"
				],
				"lastPublishTime": "2021-03-09T09:58:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Wait 9')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Used just so the procfwk has something to call during development.",
				"activities": [
					{
						"name": "Wait9",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"WaitTime": {
						"type": "int",
						"defaultValue": 15
					}
				},
				"folder": {
					"name": "_Workers"
				},
				"annotations": [
					"_ProcFwkWorker"
				],
				"lastPublishTime": "2021-03-09T09:58:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Keys')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to Key Vault for all other ADF linked service credentials required to run the processing framework.",
				"annotations": [
					"procfwk"
				],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('Keys_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get ADF Pipeline Runs",
						"description": "Use the Azure Management API to return a list of data factory pipeline runs within the given time window.",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://management.azure.com/subscriptions/@{variables('SubscriptionId')}/resourceGroups/@{variables('ResourceGroupName')}/providers/Microsoft.DataFactory/factories/@{pipeline().DataFactory}/queryPipelineRuns?api-version=2018-06-01",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n  \"lastUpdatedAfter\": \"@{adddays(utcnow(),int(variables('QueryRunDays')))}\",\n  \"lastUpdatedBefore\": \"@{utcnow()}\",\n  \"filters\": [\n    {\n      \"operand\": \"PipelineName\",\n      \"operator\": \"Equals\",\n      \"values\": [\n        \"@{pipeline().parameters.PipelineName}\"\n      ]\n    }\n  ]\n}",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://management.core.windows.net/"
							}
						}
					}
				],
				"parameters": {
					"PipelineName": {
						"type": "string",
						"defaultValue": "Task_copy1"
					}
				},
				"variables": {
					"SubscriptionId": {
						"type": "String",
						"defaultValue": "41dbffdf-c52c-4c80-be57-e9da2439348a"
					},
					"ResourceGroupName": {
						"type": "String",
						"defaultValue": "CalleADF"
					},
					"QueryRunDays": {
						"type": "String",
						"defaultValue": "-7"
					}
				},
				"folder": {
					"name": "Alt 2"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FrameworkFunctions')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Interact with the Azure Functions App used as middle ware when making requests to Worker pipelines. Authentication done at the Function App level.",
				"annotations": [
					"procfwk"
				],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('FrameworkFunctions_properties_typeProperties_functionAppUrl')]",
					"functionKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "Keys",
							"type": "LinkedServiceReference"
						},
						"secretName": "FunctionDefaultKey"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Keys')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SupportDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection between ADF and processing framework metadata SQLDB.",
				"annotations": [
					"procfwk"
				],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "Keys",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('SupportDatabase_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Keys')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Email Sender')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Provide a simple abstract over the send email function with request body item exposed as pipeline parameters.",
				"activities": [
					{
						"name": "Send Email",
						"description": "Use an Azure Function to perform an SMTP client email send operation.",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "SendEmail",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"emailRecipients\": \"@{pipeline().parameters.Recipients}\",\n\"emailCcRecipients\": \"@{pipeline().parameters.CcRecipients}\",\n\"emailBccRecipients\": \"@{pipeline().parameters.BccRecipients}\",\n\"emailSubject\": \"@{pipeline().parameters.Subject}\",\n\"emailBody\": \"@{pipeline().parameters.Body}\",\n\"emailImportance\": \"@{pipeline().parameters.Importance}\"\n}",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "FrameworkFunctions",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"Recipients": {
						"type": "string"
					},
					"CcRecipients": {
						"type": "string"
					},
					"BccRecipients": {
						"type": "string"
					},
					"Subject": {
						"type": "string"
					},
					"Body": {
						"type": "string"
					},
					"Importance": {
						"type": "string"
					}
				},
				"folder": {
					"name": "_ProcFwk/_ProcFwkUtils"
				},
				"annotations": [
					"procfwk",
					"Utils"
				],
				"lastPublishTime": "2021-03-09T09:59:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FrameworkFunctions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Error')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline Error",
						"description": "Get the activity error details for the run ID of the worker pipeline called. Returns an array of all errors.",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GetActivityErrors",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\n    \"tenantId\": \"',variables('tenantId'),'\",\n    \"applicationId\": \"',variables('applicationId'),'\",\n    \"authenticationKey\": \"',variables('authenticationKey'),'\",\n    \"subscriptionId\": \"',variables('subscriptionId'),'\",\n    \"resourceGroupName\": \"',variables('resourceGroupName'),'\",\n    \"orchestratorName\": \"',pipeline().DataFactory,'\",\n    \"orchestratorType\": \"',variables('orchestratorType'),'\",\n    \"pipelineName\": \"',pipeline().parameters.PipelineName,'\",\n    \"runId\": \"',pipeline().parameters.runId,'\"\n}')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "FrameworkFunctions",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "For each error",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Pipeline Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Pipeline Error').output.Errors",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SP Insert Error",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[pr_insertError]",
										"storedProcedureParameters": {
											"ActivityName": {
												"value": {
													"value": "@item().ActivityName",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorMessage": {
												"value": {
													"value": "@item().ErrorMessage",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineName": {
												"value": {
													"value": "@pipeline().parameters.PipelineName",
													"type": "Expression"
												},
												"type": "String"
											},
											"runId": {
												"value": {
													"value": "@pipeline().parameters.runId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"runId": {
						"type": "string",
						"defaultValue": "d867a742-7ec2-4544-9b79-865b10e505d9"
					},
					"PipelineName": {
						"type": "string",
						"defaultValue": "Task"
					}
				},
				"variables": {
					"tenantId": {
						"type": "String",
						"defaultValue": "580a5de5-d69e-4245-885d-6339e2e76bc3"
					},
					"applicationId": {
						"type": "String",
						"defaultValue": "A72E314A-FBA1-48D1-AAB4-7F4B238880A1"
					},
					"authenticationKey": {
						"type": "String",
						"defaultValue": "3Z1qc~uiYX.95~_MbtA.6AE370yCl3NcmC"
					},
					"subscriptionId": {
						"type": "String",
						"defaultValue": "41dbffdf-c52c-4c80-be57-e9da2439348a"
					},
					"resourceGroupName": {
						"type": "String",
						"defaultValue": "CalleADF"
					},
					"orchestratorType": {
						"type": "String",
						"defaultValue": "ADF"
					}
				},
				"folder": {
					"name": "Alt 1"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FrameworkFunctions')]",
				"[concat(variables('factoryId'), '/linkedServices/SupportDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Intentional Error')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Used just so the procfwk has something to call during development.",
				"activities": [
					{
						"name": "Wait1",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Raise Errors or Not",
						"description": "Framework development worker simulator.",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.RaiseErrors,'true')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Call Fail Procedure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[FailProcedure]",
										"storedProcedureParameters": {
											"RaiseError": {
												"value": {
													"value": "@pipeline().parameters.RaiseErrors",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"RaiseErrors": {
						"type": "string",
						"defaultValue": "true"
					},
					"WaitTime": {
						"type": "int",
						"defaultValue": 5
					}
				},
				"folder": {
					"name": "_Workers"
				},
				"annotations": [
					"_ProcFwkWorker"
				],
				"lastPublishTime": "2021-03-09T09:59:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SupportDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetSetMetadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Single generic dataset used to get and set all database metadata.",
				"linkedServiceName": {
					"referenceName": "SupportDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "_ProcFwk"
				},
				"annotations": [
					"procfwk"
				],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SupportDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Task_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"description": "Framework development worker simulator.",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": {
								"value": "@pipeline().parameters.WaitTime",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Raise Errors or Not",
						"description": "Framework development worker simulator.",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.RaiseErrors,'true')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Call Fail Procedure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[FailProcedure]",
										"storedProcedureParameters": {
											"RaiseError": {
												"value": {
													"value": "@pipeline().parameters.RaiseErrors",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"RaiseErrors": {
						"type": "string"
					},
					"WaitTime": {
						"type": "string"
					},
					"TriggerTime": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Alt 2"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SupportDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Error_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipeline Error",
						"description": "Get the activity error details for the run ID of the worker pipeline called. Returns an array of all errors.",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GetActivityErrors",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('\n{\n    \"tenantId\": \"',variables('tenantId'),'\",\n    \"applicationId\": \"',variables('applicationId'),'\",\n    \"authenticationKey\": \"',variables('authenticationKey'),'\",\n    \"subscriptionId\": \"',variables('subscriptionId'),'\",\n    \"resourceGroupName\": \"',variables('resourceGroupName'),'\",\n    \"orchestratorName\": \"',pipeline().DataFactory,'\",\n    \"orchestratorType\": \"',variables('orchestratorType'),'\",\n    \"pipelineName\": \"',pipeline().parameters.PipelineName,'\",\n    \"runId\": \"',pipeline().parameters.runId,'\"\n}')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "FrameworkFunctions",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "For each error",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Pipeline Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Pipeline Error').output.Errors",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SP Insert Error",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[pr_insertError]",
										"storedProcedureParameters": {
											"ActivityName": {
												"value": {
													"value": "@item().ActivityName",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorMessage": {
												"value": {
													"value": "@item().ErrorMessage",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineName": {
												"value": {
													"value": "@pipeline().parameters.PipelineName",
													"type": "Expression"
												},
												"type": "String"
											},
											"runId": {
												"value": {
													"value": "@pipeline().parameters.runId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"runId": {
						"type": "string",
						"defaultValue": "d867a742-7ec2-4544-9b79-865b10e505d9"
					},
					"PipelineName": {
						"type": "string",
						"defaultValue": "Task"
					}
				},
				"variables": {
					"tenantId": {
						"type": "String",
						"defaultValue": "580a5de5-d69e-4245-885d-6339e2e76bc3"
					},
					"applicationId": {
						"type": "String",
						"defaultValue": "A72E314A-FBA1-48D1-AAB4-7F4B238880A1"
					},
					"authenticationKey": {
						"type": "String",
						"defaultValue": "3Z1qc~uiYX.95~_MbtA.6AE370yCl3NcmC"
					},
					"subscriptionId": {
						"type": "String",
						"defaultValue": "41dbffdf-c52c-4c80-be57-e9da2439348a"
					},
					"resourceGroupName": {
						"type": "String",
						"defaultValue": "CalleADF"
					},
					"orchestratorType": {
						"type": "String",
						"defaultValue": "ADF"
					}
				},
				"folder": {
					"name": "Alt 2"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/FrameworkFunctions')]",
				"[concat(variables('factoryId'), '/linkedServices/SupportDatabase')]"
			]
		}
	]
}